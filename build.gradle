plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4' apply false
    id "org.sonarqube" version "6.3.1.5724"
    id 'jacoco'
}

allprojects {
    group = 'io.github.yyytir777'
    version = "1.1.0"

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }
}

subprojects {
    apply plugin: 'java'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:6.0.0'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.0'
        testImplementation 'org.assertj:assertj-core:3.27.6'
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        finalizedBy tasks.named("jacocoTestReport")
    }

    apply plugin: 'jacoco'
    jacoco { toolVersion = "0.8.11" }
}

tasks.named("test") {
    useJUnitPlatform()
    finalizedBy(tasks.named("jacocoTestReport"))
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.register("jacocoRootReport", JacocoReport) {
    dependsOn(subprojects.test)

    // 모든 하위 모듈의 exec 파일 수집
    executionData(fileTree(dir: ".", include: ["**/build/jacoco/test.exec"]))

    // 모든 하위 모듈의 main sourceSets를 배열로 전달
    def allSourceSets = subprojects.collect { it.sourceSets.main } as SourceSet[]
    sourceSets(allSourceSets)

    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = file("$buildDir/reports/jacoco/jacocoRootReport.xml")
    }
}

sonar {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "yyytir777"
        property "sonar.projectKey", "yyytir777_mocka"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoRootReport.xml"
    }
}

tasks.register('aggregateJavadocs', Javadoc) {
    description = "Generates a combined Javadoc for all subprojects"
    group = "documentation"

    def javaProjects = subprojects.findAll { it.plugins.hasPlugin('java') }

    source javaProjects.collect {
        it.extensions.getByType(JavaPluginExtension)
                .sourceSets.named('main').get().allJava
    }

    classpath = files(javaProjects.collect {
        it.extensions.getByType(JavaPluginExtension)
                .sourceSets.named('main').get().compileClasspath
    })

    destinationDir = file("$buildDir/docs/javadoc")

    options.encoding = 'UTF-8'
    failOnError = false
}